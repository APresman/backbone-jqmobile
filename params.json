{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Backbone framework for jquery mobile.","body":"# backbone-jqmobile\r\n\r\nBackbone provides very good modularization and MV* pattern for javascript applications. On the other hand jquery-mobile is having very easy to use, versatile, cross-device compatible HTML5 mobile UI framework.\r\n\r\nAfter developing couple of applications on jquery-mobile and backbone, We quickly realize that its not simple to use both together as both are overlapping on few areas. \r\n\r\nThis framework addresses following  \r\n1. Backbone and Jquery-mobile integration.  \r\n2. Backbone based jquery-mobile classes and widgets.\r\n\r\n##Terminology##\r\n**jumpui**  \r\njumpui is global namespace used. \r\n\r\n###Core####\r\n**JqmApp** (jumpui.JqmApp)  \r\nJqmApp is application class, There should be only one instance per app.\r\n\r\n**Platform** (jumpui.Platform)  \r\nSpecifies platform on which this application should run.  \r\ni.e. WEB, CORDOVA.  \r\n*Note:* Currently only WEB as platform is supported. But it also works just fine on CORDOVA. This class is mainly for future use.\r\n\r\n**TemplateEngine** (jumpui.TemplateEngine)  \r\nbackbone-jqmobile supports templating out of box.  \r\n\t* jumpui.template.engine.Handlebars   \r\n\t* jumpui.template.engine.Underscore (Not implemented yet)\r\n\r\n###View###\r\nAll the view classes are extended from Backbone.View, so most of the features of Backbone.View should work.\r\n\r\n**Page**  \r\nPage is root (parent) UI element which takes up whole page area.  \r\nEach page has name & route(URL hash) attribute. So when back button is clicked app will display (and execute proper call chain) of previous page.  \r\n\r\nBasically it is Jquery-mobile data-role='page' div. \r\n\r\n \r\n**Block**  \r\nEach page is made of one of multiple Blocks. Block can return any HTML content generated manually or generated using template. But Ideally Block accepts *template* as attributes, and it will be rendered using specified templateEngine in backbone-jqmobile App instance.\r\n\r\nCurrently following blocks are implemented and ready to use.  \r\n  * Header  \r\n  * Content    \r\n  * Footer  \r\n\r\nBlock and Page share lot of common features.  \r\nBlock is  well suited for higer level page constructs like Header,Sidebar, Footer, Notification bar etc.\r\n \r\n*Note:* Currently all blocks are rendered sequentially within Page, but later on, there will be template for Page too.\r\n\r\n**Fragment**  \r\nFragment is a child of Block which can be independtly used.\r\nIt has similar characteristics like Block, but it should be used for independent smaller chunks of UI within a Block.   \r\n\r\nFragment has *template* feature like Block, and *getModel* method should provide model for rendering Fragment.  \r\nFragment can be used in Block by specifying *'fragments'* attribute, which has *fragment-key* as Object Key and fragment_object as Object value.  \r\n\r\n*For example:*\r\n\r\n```  \r\nfragments: {\r\n   'loginStatus': new LoginFragment()\r\n}\r\n``` \r\nand it will be refrenced (and rendered) in Block template by using *data-fragment={fragment-key}*  \r\n\r\n*Example of Block template:* \r\n\r\n```\r\n <div class='bottomBar'>\r\n   <div data-fragment='loginStatus'>\r\n   </div> \r\n </div>\r\n```\r\n\r\n**Events**  \r\n*Coming soon*\r\n\r\n\r\n###Widget (coming soon)###\r\nWidgets are jquery mobile views, binded with Backbone.Model or Backbone.Collection.  \r\nTakes away pain with refreshing jquery-mobile views, when data changes. Allows programatically creation of forms/list easily.\r\n\r\nSome of planned widgets are  \r\n  * ListView (collection backed)  \r\n  * Popup (Model backed)  \r\n  * Form  \r\n  * etc.  \r\n  \r\n\r\n###Demo & Examples###\r\n**Basic example**  \r\n\r\n```javascript  \r\n\t    \r\n\t//Main app instance\r\n\tapp = new jumpui.JqmApp({\r\n\t    platform: jumpui.Platform.WEB,\r\n\t    containerEl: '#appContainer'\r\n\t});\r\n\t\r\n\tvar demoPage = new jumpui.Page({\r\n\t    name:\"Demo\", \r\n\t    // router is ommitted,so name gets used as route\r\n\t    \r\n\t\t// Blocks can accept pure HTML content via getContent() or template via template key\r\n\t    blocks:{\r\n\t        'header': new jumpui.block.Header({\r\n\t            getContent:function(){\r\n\t                return '<h3>Demo</h3>';\r\n\t            }\r\n\t        }),\r\n\t        'content': new jumpui.block.Content({\r\n\t\t\t\tgetContent:function(){\r\n\t                return '<p>Page content</p>';\r\n\t            }\r\n\t\t\t})\r\n\t    },\r\n\t\t// will be called everytime page is displayed\r\n\t    prepare:function(){\r\n\t        this.model={};\r\n\t        //must return true to continue loading\r\n\t        return true;\r\n\t    }\r\n\t});\r\n\t\r\n\t//add page to app                \r\n\tapp.addPage(demoPage);\r\n\t\r\n\t//fix for now\r\n\tsetTimeout(function(){\r\n\t\tapp.load();\r\n\t},0);\r\n```\r\n\r\n**Fragments example**   \r\n```javascript  \r\n\r\n\t//Main app instance\r\n\tapp = new jumpui.JqmApp({\r\n\t    platform: jumpui.Platform.WEB,\r\n\t    containerEl: '#appContainer',\r\n\t    templateEngine: new jumpui.template.engine.Handlebars()\r\n\t});\r\n\t\r\n\tvar demoPage = new jumpui.Page({\r\n\t    name:\"Demo\",\r\n\t    \r\n\t\troute:\"demo\", // If ommitted, page name will be used as a route\r\n\t\t\r\n\t\t// similar to standard backbone events\r\n\t\t// has additional framework events\r\n\t\tevents: {\r\n\t\t\t'jui-pageloaded': 'pageLoaded'\r\n\t\t},\r\n\t\t\r\n\t\tpageLoaded: function(){\r\n\t\t},\r\n\t\t\r\n\t\t// will be called only once when page is initialized first time\r\n\t\tinit: function(){\r\n\t\t},\r\n\t\t\r\n\t\t// Blocks can accept pure HTML content via getContent() or template via template key\r\n\t    blocks:{\r\n\t        'header': new jumpui.block.Header({\r\n\t            getContent:function(){\r\n\t                return '<h3>Demo</h3>';\r\n\t            }\r\n\t        }),\r\n\t\t\t\r\n\t        'content': new jumpui.block.Content({\r\n\t\t\t\ttemplate: function(){\r\n\t\t\t\t\treturn \"<p>{{text}}<p>\";\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\t\r\n\t\t\t'footer': new jumpui.block.Footer({\r\n\t\t\t\t// Can specify additional attributes which will be appended to target element\r\n\t\t\t\tattributes: {\r\n\t\t\t\t\t'data-position': 'fixed',\r\n\t\t\t\t\t'data-role': 'footer'\r\n\t\t\t\t},\r\n\t\t\t\tgetContent: function(){\r\n\t\t\t\t\treturn \"<h3>Demo Footer</h3>\";\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t    },\r\n\t\t\r\n\t\t// will be called everytime page is displayed\r\n\t    prepare:function(){\r\n\t        this.model={'text':'hello world'};\r\n\t        return true;\r\n\t    }\r\n\t});\r\n\t\r\n\t//add page to app                \r\n\tapp.addPage(demoPage);\r\n\t\r\n\t//fix for now\r\n\tsetTimeout(function(){\r\n\t\tapp.load();\r\n\t},0);\r\n``` \r\n\r\nDemo On [JSFiddle](http://jsfiddle.net/nachiket/mtLkk/)\r\n\r\nFor more demo check - http://apps.jumpbyte.com/backbone-jqmobile/","name":"Backbone-jqmobile","google":"UA-33585830-1"}